pipeline {
    agent any

    stages {
        stage('Checkout') {
            steps {
                // Checkout code from the main branch
                git branch: 'main', url: 'https://github.com/abhishekjyethi/Devops-2024'
            }
        }
        
        stage('Create_infra') {
            steps {
                withCredentials([aws(accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'awsjenkinsdemoxxx', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                    dir('terraform') {
                        sh 'terraform init'
                        sh 'terraform plan -out=tfplan'
                        sh 'terraform apply -auto-approve tfplan'
                    }
                }
            }
        }

        stage('Extract required IP & Port') {
            steps {
                withCredentials([aws(accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'your-aws-credentials-id', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                    dir('terraform') {
                        script {
                            // Extract the backend private IP from Terraform output
                            env.BACKEND_PUBLIC_IP = sh(script: "terraform output -raw backend_public_ip", returnStdout: true).trim()
                            env.BACKEND_PRIVATE_IP = sh(script: "terraform output -raw backend_private_ip", returnStdout: true).trim()
                            env.FRONTEND_PUBLIC_IP = sh(script: "terraform output -raw frontend_public_ip", returnStdout: true).trim()
                            env.FRONTEND_PORT = sh(script: "terraform output -raw frontend_port", returnStdout: true).trim()
                        }
                    }
                }
            }
        }

        stage('Update and Deploy Applications') {
            steps {
                sshagent(['your-ssh-credentials-id']) { // save your private key credentials in ssh agent through plugins 
                    script {
                        sh """
                        ssh -o StrictHostKeyChecking=no -i /home/ubantu/abhishek-1 ubuntu@${env.BACKEND_PUBLIC_IP} 'chmod +x /home/ubuntu/backend.sh && ./backend.sh'
                        ssh -o StrictHostKeyChecking=no -i /home/ubantu/abhishek-1 ubuntu@${env.BACKEND_PUBLIC_IP} 'sudo docker pull abhishekjyethi/backend'
                        ssh -o StrictHostKeyChecking=no -i /home/ubantu/abhishek-1 ubuntu@${env.BACKEND_PUBLIC_IP} 'sudo docker run -d -p 3306:3306 abhishekjyethi/backend:new'
                        """

                        sh """
                        ssh -o StrictHostKeyChecking=no -i /home/ubantu/abhishek-1 ubuntu@${env.FRONTEND_PUBLIC_IP} 'chmod +x /home/ubuntu/frontend.sh && ./frontend.sh'
                        ssh -o StrictHostKeyChecking=no -i /home/ubantu/abhishek-1 ubuntu@${env.FRONTEND_PUBLIC_IP} 'sudo docker pull abhishekjyethi/frontend'
                        ssh -o StrictHostKeyChecking=no -i /home/ubantu/abhishek-1 ubuntu@${env.FRONTEND_PUBLIC_IP} 'sudo docker run -d -p 80:80 -e DB_HOST=${env.BACKEND_PRIVATE_IP} abhishekjyethi/frontend:new5'
                        """
                    }
                }
            }
        }

        stage('Test_solution') {
            steps {
                sshagent(['your-ssh-credentials-id']) {
                    script {
                        echo "Frontend Public IP: ${env.FRONTEND_PUBLIC_IP}"
                        def frontend_address = "http://${env.FRONTEND_PUBLIC_IP}:${env.FRONTEND_PORT}"
                        echo "Frontend Application URL: ${frontend_address}"
                        // Assign the URL to an environment variable
                        env.FRONTEND_URL = frontend_address
                    }
                }
            }
        }
    }

    post {
        always {
            echo "Pipeline completed"
            echo "Frontend URL: ${env.FRONTEND_URL}"
        }
    }
}
